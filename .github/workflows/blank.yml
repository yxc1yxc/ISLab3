# This is a basic workflow to help you get started with Actions

name: gradingWorkflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build-and-test:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      - uses: actions/checkout@v3
      

      
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Create Build Environment
        run: cmake -B build

      - name: Build
        run: cmake --build build --config Debug

      - name: List files
        run: dir

        
      - name: Run with proper input
        run: .\build\Debug\lab_3.exe TicTacToe < WintestA.txt > testAOutput.txt 
        shell: cmd

      - name: check empty board
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content emptyBoardTesting.txt -Raw
          if ($actual -match $expected) {
            Write-Host "Empty board state is correct."
          } else {
            Write-Host "Empty board state is incorrect."
            exit 1
          }

      - name: check first step
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content testAstep1.txt -Raw
          if ($actual -match $expected) {
            Write-Host "step 1 is correct."
          } else {
            Write-Host "step 1 is incorrect."
            exit 1
          }

      - name: check second step
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content testAstep2.txt -Raw
          if ($actual -match $expected) {
            Write-Host "step 2 is correct."
          } else {
            Write-Host "step 2 is incorrect."
            exit 1
          }

      - name: check third step
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content testAstep3.txt -Raw
          if ($actual -match $expected) {
            Write-Host "step 3 is correct."
          } else {
            Write-Host "step 3 is incorrect."
            exit 1
          }

      - name: check fourth step
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content testAstep4.txt -Raw
          if ($actual -match $expected) {
            Write-Host "step 4 is correct."
          } else {
            Write-Host "step 4 is incorrect."
            exit 1
          }

      - name: check fifth step
        run: |
          $actual = Get-Content testAOutput.txt -Raw
          $expected = Get-Content testAstep5.txt -Raw
          if ($actual -match $expected) {
            Write-Host "step 5 is correct."
          } else {
            Write-Host "step 5 is incorrect."
            exit 1
          }

      - name: input for quit
        run: .\build\Debug\lab_3.exe TicTacToe < quitTestA.txt > quitTestAOutPut.txt 
        shell: cmd
        continue-on-error: true

      - name: Display output content
        run: |
          $content = Get-Content quitTestAOutPut.txt -Raw
          Write-Host "Content of quitTestAOutPut.txt:"
          Write-Host $content

      - name: check quit first
        run: |
          $actual = Get-Content quitTestAOutPut.txt -Raw
          $conditions = Get-Content -Path quitTestAresult.txt
          
          $allMatched = $true
          
          foreach ($condition in $conditions) {
              if (-not ($actual -match $condition)) {
                  $allMatched = $false
                  Write-Host "'$condition' not found in the output."
                  break
              }
          }

          if ($allMatched) {
              Write-Host "All conditions found in the output."
          } else {
              exit 1
          }

      - name: input for quit part 2
        run: .\build\Debug\lab_3.exe TicTacToe < quitTestB.txt > quitTestBOutPut.txt 
        shell: cmd
        continue-on-error: true

      

      - name: check quit second
        run: |
          $actual = Get-Content quitTestBOutPut.txt -Raw
          $conditions = Get-Content -Path quitTestBresult.txt
          
          $allMatched = $true
          
          foreach ($condition in $conditions) {
              if (-not ($actual -match $condition)) {
                  $allMatched = $false
                  Write-Host "$condition not found in the output."
                  exit 1
              }
          }
          
          if ($allMatched) {
              Write-Host "All conditions found in the output."
          }

      - name: input for history check
        run: .\build\Debug\lab_3.exe TicTacToe < WintestA.txt > historyOutput.txt
        shell: cmd

      - name: check history
        run: |
          $actual = Get-Content historyOutput.txt -Raw
          $conditions = Get-Content -Path recordPattern.txt
          
          $allMatched = $true
          
          foreach ($condition in $conditions) {
              if (-not ($actual -match $condition)) {
                  $allMatched = $false
                  Write-Host "$condition not found in the output."
                  exit 1
              }
          }
          
          if ($allMatched) {
              Write-Host "All conditions found in the output."
          }


      


